AWSTemplateFormatVersion: "2010-09-09"
Description: This CloudFormation template provisions the resources required to connect to AWS account

Conditions:
  EnableGrab: !Equals [!Ref "AWS::Region", "ap-southeast-1"]
  EnablePinTranslate: !Equals [!Ref "AWS::Region", "us-east-1"]

Resources:
  ################ Congito #######################

  CognitoIdentityPoolUnauthRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRoleWithWebIdentity"
            Condition:
              "StringEquals":
                "cognito-identity.amazonaws.com:aud": !Ref CognitoIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
        Version: 2012-10-17

  TranslatelUnauthRoleIamPolicy:
    Type: "AWS::IAM::Policy"
    Condition: EnablePinTranslate
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - "mobiletargeting:PutEvents"
              - "mobiletargeting:UpdateEndpoint"
              - "mobiletargeting:GetEndpoint"
            Effect: Allow
            Resource:
              - !Sub "arn:aws:mobiletargeting:${AWS::Region}:${AWS::AccountId}:apps/${AmazonLocationDemoPinpointApp}/*"
          - Action:
              - "mobileanalytics:PutEvents"
              - "translate:TranslateText"
            Effect: Allow
            Resource:
              - "*"
        Version: 2012-10-17
      PolicyName: !Sub "TranslateUnauthRoleIamPolicy-${AWS::StackName}"
      Roles:
        - !Ref CognitoIdentityPoolUnauthRole

  CognitoIdentityPoolUnauthRoleIamPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - "geo:GetPlace"
              - "geo:SearchPlaceIndex*"
              - "geo:GetMap*"
              - "geo:CalculateRoute"
              - "geo:GetGeofence"
              - "geo:ListGeofences"
              - "geo:BatchEvaluateGeofences"
              - "iot:Subscribe"
              - "iot:Publish"
              - "iot:Connect"
              - "iot:Receive"
              - "iot:AttachPrincipalPolicy"
              - "iot:AttachPolicy"
              - "iot:DetachPrincipalPolicy"
              - "iot:DetachPolicy"
            Effect: Allow
            Resource:
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:map/location.aws.com.demo.maps.Esri.Light"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:map/location.aws.com.demo.maps.Esri.DarkGrayCanvas"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:map/location.aws.com.demo.maps.Esri.Imagery"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:map/location.aws.com.demo.maps.Esri.LightGrayCanvas"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:map/location.aws.com.demo.maps.Esri.Navigation"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:map/location.aws.com.demo.maps.Esri.Streets"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:map/location.aws.com.demo.maps.HERE.Explore"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:map/location.aws.com.demo.maps.HERE.Contrast"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:map/location.aws.com.demo.maps.HERE.ExploreTruck"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:map/location.aws.com.demo.maps.HERE.Hybrid"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:map/location.aws.com.demo.maps.HERE.Imagery"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:map/location.aws.com.demo.maps.Grab.StandardLight"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:map/location.aws.com.demo.maps.Grab.StandardDark"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:map/location.aws.com.demo.maps.OpenData.StandardLight"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:map/location.aws.com.demo.maps.OpenData.StandardDark"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:map/location.aws.com.demo.maps.OpenData.VisualizationLight"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:map/location.aws.com.demo.maps.OpenData.VisualizationDark"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:place-index/location.aws.com.demo.places.Esri.PlaceIndex"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:place-index/location.aws.com.demo.places.HERE.PlaceIndex"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:place-index/location.aws.com.demo.places.Grab.PlaceIndex"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:route-calculator/location.aws.com.demo.routes.Esri.RouteCalculator"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:route-calculator/location.aws.com.demo.routes.HERE.RouteCalculator"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:route-calculator/location.aws.com.demo.routes.Grab.RouteCalculator"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:geofence-collection/location.aws.com.demo.geofences.BusStopsCollection01"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:geofence-collection/location.aws.com.demo.geofences.BusStopsCollection02"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:geofence-collection/location.aws.com.demo.geofences.BusStopsCollection03"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:geofence-collection/location.aws.com.demo.geofences.BusStopsCollection04"
              - !Sub "arn:aws:geo:${AWS::Region}:${AWS::AccountId}:geofence-collection/location.aws.com.demo.geofences.BusStopsCollection05"
              - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:client/${!cognito-identity.amazonaws.com:sub}"
              - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${!cognito-identity.amazonaws.com:sub}"
              - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/${!cognito-identity.amazonaws.com:sub}/*"
              - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${!cognito-identity.amazonaws.com:sub}/tracker"
          - Action:
              - "iot:AttachPolicy"
              - "iot:DetachPolicy"
              - "iot:AttachPrincipalPolicy"
              - "iot:DetachPrincipalPolicy"
            Effect: Allow
            Resource:
              - "*"
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:sub: "${cognito-identity.amazonaws.com:sub}"
        Version: 2012-10-17
      PolicyName: !Sub "CognitoIdentityPoolUnauthRoleIamPolicy-${AWS::StackName}"
      Roles:
        - !Ref CognitoIdentityPoolUnauthRole

  AmazonLocationKinesisDeliveryRole:
    Condition: EnablePinTranslate
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: "sts:AssumeRole"
            Condition:
              StringEquals:
                "sts:ExternalId": !Ref "AWS::AccountId"
      Path: "/"

  FirehoseS3AccessPolicy:
    Condition: EnablePinTranslate
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: FirehoseS3AccessPolicy
      Roles:
        - !Ref AmazonLocationKinesisDeliveryRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "s3:AbortMultipartUpload"
              - "s3:GetBucketLocation"
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:ListBucketMultipartUploads"
              - "s3:PutObject"
            Resource:
              - !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref AmazonLocationDemoKinesisBucket
              - !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref AmazonLocationDemoKinesisBucket
                  - "/*"
          - Effect: Allow
            Action:
              - "logs:PutLogEvents"
            Resource:
              - !Join
                - ""
                - - "arn:aws:logs:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - "log-group:/aws/kinesisfirehose/KDF-"

  AmazonLocationDemoPinpointStreamRole:
    Condition: EnablePinTranslate
    DependsOn:
      - AmazonLocationDemoKinesisStream
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: "pinpoint"
            Effect: Allow
            Principal:
              Service: pinpoint.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"

  AmazonLocationDemoPinpointStreamPolicy:
    Condition: EnablePinTranslate
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: StreamAccessPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - kinesis:PutRecords
              - kinesis:DescribeStream
            Resource:
              - !GetAtt AmazonLocationDemoKinesisStream.Arn
      Roles:
        - !Ref AmazonLocationDemoPinpointStreamRole

  AmazonLocationDemoPinpointStreamKMSAccessPolicy:
    Condition: EnablePinTranslate
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: KMSAccessPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource:
              - !GetAtt AmazonLocationDemoKMS.Arn
      Roles:
        - !Ref AmazonLocationDemoPinpointStreamRole

  CognitoIdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      AllowUnauthenticatedIdentities: true
      AllowClassicFlow: true

  CognitoIdentityPoolDefaultRoleAttachment:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        unauthenticated: !GetAtt
          - CognitoIdentityPoolUnauthRole
          - Arn

  AmazonLocationDemoLoggingBucket:
    Condition: EnablePinTranslate
    Type: "AWS::S3::Bucket"
    DeletionPolicy: RetainExceptOnCreate
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub "location.aws.com.demo.bucket.logs.${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms

  AmazonLocationDemoKinesisBucket:
    Condition: EnablePinTranslate
    Type: "AWS::S3::Bucket"
    DeletionPolicy: RetainExceptOnCreate
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub "location.aws.com.demo.kinesis.${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref AmazonLocationDemoLoggingBucket
        LogFilePrefix: kinesis-bucket-logs
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms

  AmazonLocationDemoKinesisBucketPolicy:
    Condition: EnablePinTranslate
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AmazonLocationDemoKinesisBucket
      PolicyDocument:
        Version: "2012-10-17"
        Id: PutObjPolicy
        Statement:
          - Sid: DenyIncorrectEncryptionHeader
            Effect: Deny
            Principal: "*"
            Action: "s3:PutObject"
            Resource: !Sub "arn:aws:s3:::${AmazonLocationDemoKinesisBucket}/*"
            Condition:
              "StringNotEquals":
                s3:x-amz-server-side-encryption: "aws:kms"
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: "*"
            Action: "s3:PutObject"
            Resource: !Sub "arn:aws:s3:::${AmazonLocationDemoKinesisBucket}/*"
            Condition:
              "Null":
                s3:x-amz-server-side-encryption: "true"
          - Sid: DenyUnsecureTransport
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub "arn:aws:s3:::${AmazonLocationDemoKinesisBucket}/*"
              - !Sub "arn:aws:s3:::${AmazonLocationDemoKinesisBucket}"
            Condition:
              Bool:
                "aws:SecureTransport": false
                "aws:SourceArn": !Sub "arn:aws:s3:::${AmazonLocationDemoKinesisBucket}"

  AmazonLocationDemoLoggingBucketPolicy:
    Condition: EnablePinTranslate
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AmazonLocationDemoLoggingBucket
      PolicyDocument:
        Version: "2012-10-17"
        Id: PutObjPolicy
        Statement:
          - Sid: DenyIncorrectEncryptionHeader
            Effect: Deny
            Principal: "*"
            Action: "s3:PutObject"
            Resource: !Sub "arn:aws:s3:::${AmazonLocationDemoLoggingBucket}/*"
            Condition:
              "StringNotEquals":
                s3:x-amz-server-side-encryption: "aws:kms"
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: "*"
            Action: "s3:PutObject"
            Resource: !Sub "arn:aws:s3:::${AmazonLocationDemoLoggingBucket}/*"
            Condition:
              "Null":
                s3:x-amz-server-side-encryption: "true"
          - Sid: DenyUnsecureTransport
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub "arn:aws:s3:::${AmazonLocationDemoLoggingBucket}/*"
              - !Sub "arn:aws:s3:::${AmazonLocationDemoLoggingBucket}"
            Condition:
              Bool:
                "aws:SecureTransport": false
                "aws:SourceArn": !Sub "arn:aws:s3:::${AmazonLocationDemoLoggingBucket}"

  AmazonLocationDemoKMS:
    Type: AWS::KMS::Key
    Properties:
      Description: You created this resource by running Amazon Location Demo's CloudFormation template.
      KeyPolicy:
        Version: "2012-10-17"
        Id: default-policy
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: "*"
          - Sid: Allow KMS Key Administrators to Manage Key
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt CognitoIdentityPoolUnauthRole.Arn
                - !If [EnablePinTranslate, !GetAtt AmazonLocationKinesisDeliveryRole.Arn, !Ref AWS::NoValue]
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:CreateGrant
              - kms:DescribeKey
              - kms:ListAliases
              - kms:ListKeys
            Resource: "*"

  AmazonLocationDemoKinesisStream:
    Condition: EnablePinTranslate
    Type: AWS::Kinesis::Stream
    DeletionPolicy: RetainExceptOnCreate
    UpdateReplacePolicy: Retain
    Properties:
      Name: location.aws.com.demo.app
      RetentionPeriodHours: 24
      ShardCount: 1
      StreamEncryption:
        EncryptionType: KMS
        KeyId: !Ref AmazonLocationDemoKMS

  AmazonLocationDemoKinesisFirehose:
    Condition: EnablePinTranslate
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: location.aws.com.demo.app
      S3DestinationConfiguration:
        BucketARN: !GetAtt AmazonLocationDemoKinesisBucket.Arn
        RoleARN: !GetAtt AmazonLocationKinesisDeliveryRole.Arn

  AmazonLocationDemoPinpointApp:
    Condition: EnablePinTranslate
    Type: AWS::Pinpoint::App
    Properties:
      Name: location.aws.com.demo.app

  AmazonLocationDemoPinpointAppStream:
    DependsOn:
      - AmazonLocationDemoPinpointStreamKMSAccessPolicy
      - AmazonLocationDemoPinpointStreamPolicy
    Condition: EnablePinTranslate
    Type: AWS::Pinpoint::EventStream
    Properties:
      ApplicationId: !Ref AmazonLocationDemoPinpointApp
      DestinationStreamArn: !GetAtt AmazonLocationDemoKinesisStream.Arn
      RoleArn: !GetAtt AmazonLocationDemoPinpointStreamRole.Arn

  AmazonLocationDemoMapsOpenDataLight:
    Type: AWS::Location::Map
    Properties:
      Configuration:
        Style: VectorOpenDataStandardLight
      Description: You created this resource by running Amazon Location Demo's CloudFormation template.
      MapName: location.aws.com.demo.maps.OpenData.StandardLight

  AmazonLocationDemoMapsOpenDataDark:
    Type: AWS::Location::Map
    Properties:
      Configuration:
        Style: VectorOpenDataStandardDark
      Description: You created this resource by running Amazon Location Demo's CloudFormation template.
      MapName: location.aws.com.demo.maps.OpenData.StandardDark

  AmazonLocationDemoMapsOpenDataVisualizationLight:
    Type: AWS::Location::Map
    Properties:
      Configuration:
        Style: VectorOpenDataVisualizationLight
      Description: You created this resource by running Amazon Location Demo's CloudFormation template.
      MapName: location.aws.com.demo.maps.OpenData.VisualizationLight

  AmazonLocationDemoMapsOpenDataVisualizationDark:
    Type: AWS::Location::Map
    Properties:
      Configuration:
        Style: VectorOpenDataVisualizationDark
      Description: You created this resource by running Amazon Location Demo's CloudFormation template.
      MapName: location.aws.com.demo.maps.OpenData.VisualizationDark

  AmazonLocationDemoMapsEsriLight:
    Type: AWS::Location::Map
    Properties:
      Configuration:
        Style: VectorEsriTopographic
      Description: You created this resource by running Amazon Location Demo's CloudFormation template.
      MapName: location.aws.com.demo.maps.Esri.Light

  AmazonLocationDemoMapsEsriStreets:
    Type: AWS::Location::Map
    Properties:
      Configuration:
        Style: VectorEsriStreets
      Description: You created this resource by running Amazon Location Demo's CloudFormation template.
      MapName: location.aws.com.demo.maps.Esri.Streets

  AmazonLocationDemoMapsEsriDarkGrayCanvas:
    Type: AWS::Location::Map
    Properties:
      Configuration:
        Style: VectorEsriDarkGrayCanvas
      Description: You created this resource by running Amazon Location Demo's CloudFormation template.
      MapName: location.aws.com.demo.maps.Esri.DarkGrayCanvas

  AmazonLocationDemoMapsEsriImagery:
    Type: AWS::Location::Map
    Properties:
      Configuration:
        Style: RasterEsriImagery
      Description: You created this resource by running Amazon Location Demo's CloudFormation template.
      MapName: location.aws.com.demo.maps.Esri.Imagery

  AmazonLocationDemoMapsEsriLightGrayCanvas:
    Type: AWS::Location::Map
    Properties:
      Configuration:
        Style: VectorEsriLightGrayCanvas
      Description: You created this resource by running Amazon Location Demo's CloudFormation template.
      MapName: location.aws.com.demo.maps.Esri.LightGrayCanvas

  AmazonLocationDemoMapsEsriNavigation:
    Type: AWS::Location::Map
    Properties:
      Configuration:
        Style: VectorEsriNavigation
      Description: You created this resource by running Amazon Location Demo's CloudFormation template.
      MapName: location.aws.com.demo.maps.Esri.Navigation

  AmazonLocationDemoMapsHere:
    Type: AWS::Location::Map
    Properties:
      Configuration:
        Style: VectorHereExplore
      Description: You created this resource by running Amazon Location Demo's CloudFormation template.
      MapName: location.aws.com.demo.maps.HERE.Explore

  AmazonLocationDemoMapsHereContrast:
    Type: AWS::Location::Map
    Properties:
      Configuration:
        Style: VectorHereContrast
      Description: You created this resource by running Amazon Location Demo's CloudFormation template.
      MapName: location.aws.com.demo.maps.HERE.Contrast

  AmazonLocationDemoMapsHereExploreTruck:
    Type: AWS::Location::Map
    Properties:
      Configuration:
        Style: VectorHereExploreTruck
      Description: You created this resource by running Amazon Location Demo's CloudFormation template.
      MapName: location.aws.com.demo.maps.HERE.ExploreTruck

  AmazonLocationDemoMapsHereHybrid:
    Type: AWS::Location::Map
    Properties:
      Configuration:
        Style: HybridHereExploreSatellite
      Description: You created this resource by running Amazon Location Demo's CloudFormation template.
      MapName: location.aws.com.demo.maps.HERE.Hybrid

  AmazonLocationDemoMapsHereImagery:
    Type: AWS::Location::Map
    Properties:
      Configuration:
        Style: RasterHereExploreSatellite
      Description: You created this resource by running Amazon Location Demo's CloudFormation template.
      MapName: location.aws.com.demo.maps.HERE.Imagery

  AmazonLocationDemoMapsGrabStandardLight:
    Condition: EnableGrab
    Type: AWS::Location::Map
    Properties:
      Configuration:
        Style: VectorGrabStandardLight
      Description: You created this resource by running Amazon Location Demo's CloudFormation template.
      MapName: location.aws.com.demo.maps.Grab.StandardLight

  AmazonLocationDemoMapsGrabStandardDark:
    Condition: EnableGrab
    Type: AWS::Location::Map
    Properties:
      Configuration:
        Style: VectorGrabStandardDark
      Description: You created this resource by running Amazon Location Demo's CloudFormation template.
      MapName: location.aws.com.demo.maps.Grab.StandardDark

  AmazonLocationDemoPlaceIndexEsr:
    Type: AWS::Location::PlaceIndex
    Properties:
      DataSource: Esri
      Description: You created this resource by running Amazon Location Demo's CloudFormation template.
      IndexName: location.aws.com.demo.places.Esri.PlaceIndex

  AmazonLocationDemoPlaceIndexHere:
    Type: AWS::Location::PlaceIndex
    Properties:
      DataSource: Here
      Description: You created this resource by running Amazon Location Demo's CloudFormation template.
      IndexName: location.aws.com.demo.places.HERE.PlaceIndex

  AmazonLocationDemoPlaceIndexGrab:
    Condition: EnableGrab
    Type: AWS::Location::PlaceIndex
    Properties:
      DataSource: Grab
      Description: You created this resource by running Amazon Location Demo's CloudFormation template.
      IndexName: location.aws.com.demo.places.Grab.PlaceIndex

  AmazonLocationDemoRouteEsri:
    Type: AWS::Location::RouteCalculator
    Properties:
      CalculatorName: location.aws.com.demo.routes.Esri.RouteCalculator
      DataSource: Esri
      Description: You created this resource by running Amazon Location Demo's CloudFormation template.

  AmazonLocationDemoRouteHere:
    Type: AWS::Location::RouteCalculator
    Properties:
      CalculatorName: location.aws.com.demo.routes.HERE.RouteCalculator
      DataSource: Here
      Description: You created this resource by running Amazon Location Demo's CloudFormation template.

  AmazonLocationDemoRouteGrab:
    Condition: EnableGrab
    Type: AWS::Location::RouteCalculator
    Properties:
      CalculatorName: location.aws.com.demo.routes.Grab.RouteCalculator
      DataSource: Grab
      Description: You created this resource by running Amazon Location Demo's CloudFormation template.

  AmazonLocationDemoGeoFenceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/events/AmazonLocationMonitor-GeofenceCollection

  AmazonLocationDemoEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: AmazonLocationMonitor-GeofenceCollection
      EventPattern:
        source:
          - aws.geo
        detail-type:
          - Location Geofence Event
        resources:
          - !Sub arn:aws:geo:${AWS::Region}:${AWS::AccountId}:geofence-collection/location.aws.com.demo.geofences.BusStopsCollection01
          - !Sub arn:aws:geo:${AWS::Region}:${AWS::AccountId}:geofence-collection/location.aws.com.demo.geofences.BusStopsCollection02
          - !Sub arn:aws:geo:${AWS::Region}:${AWS::AccountId}:geofence-collection/location.aws.com.demo.geofences.BusStopsCollection03
          - !Sub arn:aws:geo:${AWS::Region}:${AWS::AccountId}:geofence-collection/location.aws.com.demo.geofences.BusStopsCollection04
          - !Sub arn:aws:geo:${AWS::Region}:${AWS::AccountId}:geofence-collection/location.aws.com.demo.geofences.BusStopsCollection05
      State: ENABLED
      Targets:
        - Id: GeoFenceLogGroupTarget
          Arn: !GetAtt AmazonLocationDemoGeoFenceLogGroup.Arn
        - Id: LambdaTarget
          Arn: !GetAtt AmazonLocationDemoIoTPublisherLambda.Arn

  AmazonLocationDemoIoTPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: AmazonLocationIotPolicyUnauth
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - iot:Connect
              - iot:Publish
              - iot:Subscribe
              - iot:Receive
            Resource:
              - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:client/${!cognito-identity.amazonaws.com:sub}"
              - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${!cognito-identity.amazonaws.com:sub}"
              - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/${!cognito-identity.amazonaws.com:sub}/*"
              - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${!cognito-identity.amazonaws.com:sub}/tracker"

  AmazonLocationDemoIoTEndpointLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AmazonLocationDemoIotEndpointProvider
      Handler: index.handler
      Runtime: nodejs20.x
      Timeout: 30
      Role: !GetAtt AmazonLocationLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          const {IoT} = require("@aws-sdk/client-iot");

          const policyName = "AmazonLocationIotPolicyUnauth";
          const iotClient = new IoT();

          exports.handler = function (event, context) {
                console.log("REQUEST RECEIVED:\n" + JSON.stringify(event));

                // For Delete requests, immediately send a SUCCESS response.
                if (event.RequestType == "Delete") {
                      iotClient.listTargetsForPolicy({policyName}, (err, data) => {
                            if (err) console.log(err, err.stack); // an error occurred
                            else {
                                  const targets = data.targets;

                                  targets.forEach((target) => {
                                        iotClient.detachPolicy(
                                              {
                                                    policyName,
                                                    target,
                                              },
                                              (err, _) => {
                                                    if (err) {
                                                          console.log("Inside detachpol");
                                                          console.log(err, err.stack);
                                                    } else {
                                                          console.log(
                                                                "Detached policy from target"
                                                          );
                                                    }
                                              }
                                        );
                                  });
                            }
                      });
                      sendResponse(event, context, "SUCCESS");
                      return;
                } else {
                      iotClient.describeEndpoint(
                            {
                                  endpointType: "iot:Data-ATS",
                            },
                            (err, data) => {
                                  let responseData, responseStatus;

                                  if (err) {
                                        responseStatus = "FAILED";
                                        responseData = {
                                              Error: "describeEndpoint call failed",
                                        };
                                        console.log(responseData.Error + ":\n", err);
                                  } else {
                                        responseStatus = "SUCCESS";
                                        responseData = {
                                              IotEndpointAddress: data.endpointAddress,
                                        };
                                        console.log(
                                              "response data: " +
                                                    JSON.stringify(responseData)
                                        );
                                  }

                                  sendResponse(
                                        event,
                                        context,
                                        responseStatus,
                                        responseData
                                  );
                            }
                      );
                }
          };

          // Send response to the pre-signed S3 URL
          function sendResponse(event, context, responseStatus, responseData) {
                const responseBody = JSON.stringify({
                      Status: responseStatus,
                      Reason:
                            "See the details in CloudWatch Log Stream: " +
                            context.logStreamName,
                      PhysicalResourceId: context.logStreamName,
                      StackId: event.StackId,
                      RequestId: event.RequestId,
                      LogicalResourceId: event.LogicalResourceId,
                      Data: responseData,
                });
                console.log("RESPONSE BODY:\n", responseBody);
                const https = require("https");
                const url = require("url");
                const parsedUrl = url.parse(event.ResponseURL);
                const options = {
                      hostname: parsedUrl.hostname,
                      port: 443,
                      path: parsedUrl.path,
                      method: "PUT",
                      headers: {
                            "content-type": "",
                            "content-length": responseBody.length,
                      },
                };
                console.log("SENDING RESPONSE...\n");
                const request = https.request(options, function (response) {
                      console.log("STATUS: " + response.statusCode);
                      console.log("HEADERS: " + JSON.stringify(response.headers));
                      // Tell AWS Lambda that the function execution is done
                      context.done();
                });
                request.on("error", function (error) {
                      console.log("sendResponse Error:" + error);
                      // Tell AWS Lambda that the function execution is done
                      context.done();
                });
                // write data to request body
                request.write(responseBody);
                request.end();
          }
    DependsOn:
      - AmazonLocationDemoIoTPolicy
      - AmazonLocationLambdaExecutionPolicy

  AmazonLocationDemoIoTPublisherLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          const {IoT} = require("@aws-sdk/client-iot");
          const {IoTDataPlane} = require("@aws-sdk/client-iot-data-plane");

          const iotClient = new IoT();

          exports.handler = function (event) {
                console.log("event===>>>", JSON.stringify(event));

                iotClient.describeEndpoint(
                      {
                            endpointType: "iot:Data-ATS",
                      },
                      (err, data) => {
                            if (err) {
                                  console.log("error===>>>", err, err.stack); // an error occurred
                            } else {
                                  const endpointAddress = data.endpointAddress;
                                  const iotDataPlaneClient = new IoTDataPlane({
                                        endpoint: `https://${endpointAddress}`,
                                  });
                                  const trackerEventType = event["detail"]["EventType"];
                                  const source = event["source"];
                                  const eventTime = event["time"];
                                  const geofenceId = event["detail"]["GeofenceId"];
                                  const stopName =
                                        event["detail"]["GeofenceProperties"][
                                              "stop_name"
                                        ];
                                  const coordinates = event["detail"]["Position"];
                                  const identityId = `${event["detail"]["PositionProperties"]["region"]}:${event["detail"]["PositionProperties"]["id"]}`;
                                  const resources = event["resources"][0];
                                  const splitResources = resources.split(".");
                                  const geofenceCollection =
                                        splitResources[splitResources.length - 1];
                                  const msg = {
                                        trackerEventType,
                                        source,
                                        eventTime,
                                        geofenceId,
                                        stopName,
                                        coordinates,
                                        geofenceCollection,
                                  };

                                  iotDataPlaneClient.publish(
                                        {
                                              topic: `${identityId}/tracker`,
                                              payload: JSON.stringify(msg),
                                              qos: 0,
                                        },
                                        (err, _) => {
                                              if (err) {
                                                    console.log(
                                                          "error===>>>",
                                                          err,
                                                          err.stack
                                                    ); // an error occurred
                                              } else {
                                                    console.log(
                                                          "Ladmbda triggered===>>>",
                                                          trackerEventType
                                                    ); // successful response
                                              }
                                        }
                                  );
                            }
                      }
                );
          };
      FunctionName: AmazonLocationDemoIoTPublisher
      Handler: index.handler
      Role: !GetAtt [AmazonLocationLambdaExecutionRole, Arn]
      Runtime: nodejs20.x
      Timeout: 30

  AmazonLocationLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"

  AmazonLocationLambdaExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaExecutionPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "iot:*"
              - "iot:Publish"
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: "*"
      Roles:
        - !Ref AmazonLocationLambdaExecutionRole

  AmazonLocationDemoLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: AmazonLocationDemoIoTPublisher
      Principal: events.amazonaws.com
      SourceArn: !GetAtt AmazonLocationDemoEventRule.Arn

  AmazonLocationDemoIotEndpoint:
    Type: "Custom::IotEndpoint"
    DependsOn: AmazonLocationDemoIoTEndpointLambda
    Properties:
      ServiceToken: !GetAtt AmazonLocationDemoIoTEndpointLambda.Arn

  AmazonLocationDemoGeofenceLambdaInvoke:
    Type: "Custom::GeofenceTrigger"
    DependsOn: AmazonLocationGeoFenceLambda
    Properties:
      ServiceToken: !GetAtt AmazonLocationGeoFenceLambda.Arn

  GeofenceLambdaTrigger:
    Type: AWS::Events::Rule
    DependsOn: AmazonLocationGeoFenceLambda
    Properties:
      Name: GeofenceLambdaTrigger
      EventPattern:
        Fn::Sub: >-
          {"source":["aws.cloudformation"],"region":["${AWS::Region}"],"detail-type":["CloudFormation
          Stack Status
          Change"],"detail":{"stack-id":["${AWS::StackId}"],"status-details":{"status":["UPDATE_IN_PROGRESS"]}}}
      State: ENABLED
      Targets:
        - Id: Id1acddeab-175e-495f-8b56-8d8de684f610
          Arn:
            Fn::Sub: >-
              arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:AmazonLocationDemoGeofenceCreator
          Input: |-
            {
              "RequestType": "Update"
            }

  GeofenceTriggerInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: [AmazonLocationGeoFenceLambda, GeofenceLambdaTrigger]
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: AmazonLocationDemoGeofenceCreator
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [GeofenceLambdaTrigger, Arn]

  AmazonLocationGeoFenceLambda:
    DependsOn: AmazonLocationGeoFenceLambdaExecutionPolicy
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AmazonLocationDemoGeofenceCreator
      Description: You created this resource by running Amazon Location Demo's CloudFormation template.
      Code:
        ZipFile: |
          import sys
          from pip._internal import main

          main(['install', '-I', '-q', 'boto3', '--target', '/tmp/', '--no-cache-dir', '--disable-pip-version-check'])
          sys.path.insert(0, '/tmp/')
          import json, boto3
          import urllib.request
          import cfnresponse

          def delete_geofences(client, routes):
              for route in routes:
                  collectionName = ('location.aws.com.demo.geofences.' + route['geofenceCollection'])
                  try:
                      client.delete_geofence_collection(CollectionName=collectionName)
                  except client.exceptions.ResourceNotFoundException:
                      pass  # If the collection does not exist, continue

          def lambda_handler(event, context):
              client = boto3.client("location")
              geojson_url = "https://amazon-location-resources-setup.s3.amazonaws.com/BusRoutesData/busRoutesData.json"
              with urllib.request.urlopen(geojson_url) as response:
                  data = json.load(response)
              routes = data['busRoutesData']

              if event['RequestType'] in ["Create", "Update"]:
                  # On Update, first delete the existing geofences if any
                  if event['RequestType'] == "Update":
                      delete_geofences(client, routes)
                  
                  # Create or recreate geofences
                  for route in routes:
                      id = route['id']
                      collectionName = ('location.aws.com.demo.geofences.' + route['geofenceCollection'])
                      client.create_geofence_collection(CollectionName=collectionName, Description="You created this resource by running Amazon Location Demo's CloudFormation template.")
                      
                      for i in route['stopCoordinates']:
                          coordinates = i['geometry']['coordinates']
                          stopName = i['properties']['stop_name']
                          geo_id = (id + '-' + str(i['id']))
                          client.batch_put_geofence(
                              CollectionName=collectionName,
                              Entries=[
                                  {
                                      'GeofenceId': geo_id,
                                      'GeofenceProperties': {
                                          'stop_name': stopName
                                      },
                                      'Geometry': {
                                          'Circle': {
                                              'Center': coordinates,
                                              'Radius': 200
                                          }
                                      }
                                  },
                              ]
                          )
                  responseValue = 120
                  responseData = {'Data': responseValue}
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'AmazonLocationDemoGeofenceCreator')
              
              elif event['RequestType'] == "Delete":
                  delete_geofences(client, routes)
                  responseValue = 120
                  responseData = {'Data': responseValue}
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'AmazonLocationDemoGeofenceCreator')

      Handler: index.lambda_handler
      Role: !GetAtt [AmazonLocationGeoFenceLambdaExecutionRole, Arn]
      Runtime: python3.9
      Timeout: 300

  AmazonLocationGeoFenceLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"

  AmazonLocationGeoFenceLambdaExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaExecutionPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "geo:BatchPutGeofence"
              - "geo:ListGeofenceCollections"
              - "geo:CreateGeofenceCollection"
              - "geo:DeleteGeofenceCollection"
            Resource: "*"
      Roles:
        - !Ref AmazonLocationGeoFenceLambdaExecutionRole

  AmazonLocationGeoFenceLambdaCloudWatchLogsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CloudWatchLogsPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: "*"
      Roles:
        - !Ref AmazonLocationGeoFenceLambdaExecutionRole

  AmazonLocationApiKey:
    Type: AWS::Location::APIKey
    Properties:
      KeyName: MyAmazonLocationApiKey
      Description: API Key for Amazon Location Service Maps, Places and Routes
      NoExpiry: true
      Restrictions:
        AllowActions:
          - "geo-maps:*"
          - "geo-places:*"
          - "geo-routes:*"
        AllowResources:
          - !Sub "arn:aws:geo-maps:${AWS::Region}::provider/default"
          - !Sub "arn:aws:geo-places:${AWS::Region}::provider/default"
          - !Sub "arn:aws:geo-routes:${AWS::Region}::provider/default"

Outputs:
  Region:
    Value: !Sub "${AWS::Region}"

  ApiKey:
    Value: !Ref AmazonLocationApiKey

  IdentityPoolId:
    Value: !Ref CognitoIdentityPool

  WebSocketUrl:
    Value: !GetAtt AmazonLocationDemoIotEndpoint.IotEndpointAddress

  PinPointAppId:
    Condition: EnablePinTranslate
    Value: !Ref AmazonLocationDemoPinpointApp
